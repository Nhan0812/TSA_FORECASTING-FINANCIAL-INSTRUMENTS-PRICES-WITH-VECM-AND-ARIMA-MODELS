grid.ticks.on = "years",
grid.ticks.lty = 3,
legend.loc = "bottomleft",
type="l")
plot(Data$x1,type="l")
plot(Data$x2,type="l")
plot(Data$x3,type="l")
plot(Data$x4,type="l")
plot(Data$x5,type="l")
plot(Data$x6,type="l")
plot(Data$x7,type="l")
plot(Data$x8,type="l")
plot(Data$x9,type="l")
plot(Data$x10,type="l")
library(xts)
library(tidyverse)
library(quantmod)
library(lmtest)
library(forecast)
library(dygraphs)
source("testdf.R")
source("function_plot_ACF_PACF_resids.R")
Data <- read.csv("TSA_2023_project_data_1.csv",header = TRUE, dec = ".")
str(Data)
Data$X <- as.Date(Data$X,
format = "%d-%m-%y")
#Until now the class is "Data.Frame" object
class(Data)
#Create xts objects
Data <- xts(Data[,-1], Data$X)
#After creating xts objects, the class is "xts", "zoo"
class(Data)
#Checking for missing data
summary(Data)
head(Data,6)
#Plot 10 Time Series together
#First Method
plot(Data,
main = "Line Chart for 10 Time Series",
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
legend.loc = "bottomleft",
type="l")
plot(Data$x1,type="l")
plot(Data$x2,type="l")
plot(Data$x3,type="l")
plot(Data$x4,type="l")
plot(Data$x5,type="l")
plot(Data$x6,type="l")
plot(Data$x7,type="l")
plot(Data$x8,type="l")
plot(Data$x9,type="l")
plot(Data$x10,type="l")
Data$dx1 <- diff.xts(Data$x1)
Data$dx2 <- diff.xts(Data$x1)
Data$dx3 <- diff.xts(Data$x3)
Data$dx4 <- diff.xts(Data$x4)
Data$dx5 <- diff.xts(Data$x5)
Data$dx6 <- diff.xts(Data$x6)
Data$dx7 <- diff.xts(Data$x7)
Data$dx8 <- diff.xts(Data$x8)
Data$dx9 <- diff.xts(Data$x9)
Data$dx10 <- diff.xts(Data$x10)
#Plot both variables on the graph:
plot(Data[, 1:2],
col = c("red", "blue"),
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 2,
main = "Time Series X1 & X2",
legend.loc = "topright")
testdf(variable = Data$x1,
max.augmentations = 3)
testdf(variable = Data$dx1,
max.augmentations = 3)
testdf(variable = Data$x2,
max.augmentations = 3)
testdf(variable = Data$dx2,
max.augmentations = 3)
model.coint <- lm(x1 ~ x2, data = Data)
#Examine the model summary:
summary(model.coint)
#The model is significantly explained by x2.
#We further  test the stationary of the residuals:
testdf(variable = residuals(model.coint), max.augmentations = 3)
par(mfrow = c(2, 1))
acf(Data$dx1,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(Data$dx1,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1)) # restore the original single panel
arima510 <- Arima(Data$x1,  # variable
order = c(5, 1, 0)  # (p,d,q) parameters
)
coeftest(arima510)
summary(arima510)
#The above model is not included constant. Let's include constant into the model:
arima510_2 <- Arima(Data$x1,  # variable
order = c(5, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
arima510 <- Arima(Data$x1,  # variable
order = c(5, 1, 0)  # (p,d,q) parameters)
coeftest(arima510)
coeftest(arima510_2)
#Step 3 - model diagnostics
#Method 1:
plot(resid(arima510))
#Method 2:
tibble(
date = index(Data),
resid = arima510 %>% resid() %>% as.numeric()
) %>%
ggplot(aes(date, resid)) +
geom_line(col = "royalblue3") +
theme_bw()
par(mfrow = c(2, 1))
acf(resid(arima510),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima510),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
#Method 2:
plot_ACF_PACF_resids(arima510)
Box.test(resid(arima510), type = "Ljung-Box", lag = 10)
Box.test(resid(arima510), type = "Ljung-Box", lag = 15)
Box.test(resid(arima510), type = "Ljung-Box", lag = 20)
Box.test(resid(arima510), type = "Ljung-Box", lag = 25)
bj_pvalues = c()
for(i in c(1:100)){
bj = Box.test(resid(arima510), type = "Ljung-Box", lag = i)
bj_pvalues = append(bj_pvalues,bj$p.value)
}
plot(bj_pvalues, type='l')
abline(h=0.05, col='red', type='l')
abline(h=0.05, col='red')
abline(h=0.05, col='red')
abline(h=0.05, col='gray60')
abline(h=0.05, v=0, col='gray60')
abline(h=0.05, v=1, col='gray60')
abline(h=0.05, , col='gray60')
abline(h=1, , col='gray60')
abline(h=1, col='gray60')
abline(h = 1, col='gray60')
abline(h = 1, col='gray60')
abline(h = 1, col='gray60',reg = z)
plot(bj_pvalues, type='l')
abline(h = 0.05, col='red', type = 'l')
abline(h = 0.5, col='red')
abline(h = 0.05, col='red',type="l")
abline(h = 0.05, col='red')
bj_pvalues = c()
for(i in c(1:100)){
bj = Box.test(resid(arima510), type = "Ljung-Box", lag = i)
bj_pvalues = append(bj_pvalues,bj$p.value)
}
plot(bj_pvalues, type='l')
abline(h = 0.05, col='red')
arima511 <- Arima(Data$x1,  # variable
order = c(5, 1, 1),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima511)
#ARIMA(4,1,0)
arima410 <- Arima(Data$x1,  # variable
order = c(4, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
#ARIMA(4,1,1)
arima411 <- Arima(Data$x1,  # variable
order = c(4, 1, 1),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima411)
#ARIMA(4,2,1)
arima411 <- Arima(Data$x1,  # variable
order = c(4, 2, 1),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima421)
#ARIMA(4,2,1)
arima421 <- Arima(Data$x1,  # variable
order = c(4, 2, 1),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima421)
#ARIMA(4,1,2)
arima412 <- Arima(Data$x1,  # variable
order = c(4, 1, 2),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima412)
#ARIMA(4,1,2)
arima411 <- Arima(Data$x1,  # variable
order = c(4, 1, 1),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima411)
#ARIMA(4,1,2)
arima410 <- Arima(Data$x1,  # variable
order = c(4, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima410)
#ARIMA(4,1,0)
arima410 <- Arima(Data$x1,  # variable
order = c(4, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima410)
#ARIMA(3,1,0).
arima310 <- Arima(Data$x1,  # variable
order = c(3, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima310)
AIC(arima510,arima510_2, arima511, arima410, arima310)
BIC(arima510, arima510_2, arima511, arima410, arima310)
arima.best.AIC <-
auto.arima(Data$x1,
d = 1,             # parameter d of ARIMA model
max.p = 6,         # Maximum value of p
max.q = 6,         # Maximum value of q
max.order = 12,    # maximum p+q
start.p = 1,       # Starting value of p in stepwise procedure
start.q = 1,       # Starting value of q in stepwise procedure
ic = "aic",        # Information criterion to be used in model selection.
stepwise = FALSE,  # if FALSE considers all models
allowdrift = TRUE, # include a constant
trace = TRUE)      # show summary of all models considered
#Return: Best model: ARIMA(4,1,2)
arima412 <- Arima(Data$x1,  # variable
order = c(4, 1, 2),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima412)
AIC(arima510,arima412)
BIC(arima510,arima412)
arima.best.BIC <-
auto.arima(Data$x1,
d = 1,             # parameter d of ARIMA model
max.p = 6,         # Maximum value of p
max.q = 6,         # Maximum value of q
max.order = 12,    # maximum p+q
start.p = 1,       # Starting value of p in stepwise procedure
start.q = 1,       # Starting value of q in stepwise procedure
ic = "bic",        # Information criterion to be used in model selection.
stepwise = FALSE,  # if FALSE considers all models
allowdrift = TRUE, # include a constant
trace = TRUE)      # show summary of all models considered
#Return: Best model: ARIMA(3,1,2)
arima312 <- Arima(Data$x1,  # variable
order = c(3, 1, 2),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima312)
AIC(arima510,arima412,arima312)
BIC(arima510,arima412,arima312)
par(mfrow = c(2, 1))
acf(Data$dx2,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(Data$dx2,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1)) # restore the original single panel
Data
strc(Data)
str(Data)
arima510_x2 <- Arima(Data$x2,  # variable
order = c(5, 1, 0)  # (p,d,q) parameters
)
coeftest(arima510_x2)
summary(arima510_x2)
#The above model is not included constant. Let's include constant into the model:
arima510_2_x2 <- Arima(Data$x2,  # variable
order = c(5, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima510_2_x2)
#The above model is not included constant. Let's include constant into the model:
arima510_2_x2 <- Arima(Data$x2,  # variable
order = c(5, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima510_2_x2)
#Step 3 - model diagnostics
#Method 1:
plot(resid(arima510_x2))
Box.test(resid(arima510_x2), type = "Ljung-Box", lag = 10)
Box.test(resid(arima510_x2), type = "Ljung-Box", lag = 15)
Box.test(resid(arima510_x2), type = "Ljung-Box", lag = 20)
Box.test(resid(arima510_x2), type = "Ljung-Box", lag = 25)
bj_pvalues = c()
for(i in c(1:100)){
bj = Box.test(resid(arima510_x2), type = "Ljung-Box", lag = i)
bj_pvalues = append(bj_pvalues,bj$p.value)
}
plot(bj_pvalues, type='l')
arima511_x2 <- Arima(Data$x2,  # variable
order = c(5, 1, 1),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima511_x2)
#ARIMA(4,1,0)
arima410_x2 <- Arima(Data$x2,  # variable
order = c(4, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima410_x2)
#ARIMA(3,1,0).
arima310_x2 <- Arima(Data$x2,  # variable
order = c(3, 1, 0),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
coeftest(arima310_x2)
AIC(arima510_x2,arima510_2_x2, arima511_x2, arima410_x2, arima310_x2)
BIC(arima510_x2, arima510_2_x2, arima511_x2, arima410_x2, arima310_x2)
arima.best.AIC <-
auto.arima(Data$x2,
d = 1,             # parameter d of ARIMA model
max.p = 6,         # Maximum value of p
max.q = 6,         # Maximum value of q
max.order = 12,    # maximum p+q
start.p = 1,       # Starting value of p in stepwise procedure
start.q = 1,       # Starting value of q in stepwise procedure
ic = "aic",        # Information criterion to be used in model selection.
stepwise = FALSE,  # if FALSE considers all models
allowdrift = TRUE, # include a constant
trace = TRUE)      # show summary of all models considered
#Return: Best model: ARIMA(3,1,3)
arima313_x2 <- Arima(Data$x2,  # variable
order = c(3, 1, 3),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
AIC(arima510_x2,arima313_x2)
BIC(arima510_x2,arima313_x2)
arima.best.BIC <-
auto.arima(Data$x2,
d = 1,             # parameter d of ARIMA model
max.p = 6,         # Maximum value of p
max.q = 6,         # Maximum value of q
max.order = 12,    # maximum p+q
start.p = 1,       # Starting value of p in stepwise procedure
start.q = 1,       # Starting value of q in stepwise procedure
ic = "bic",        # Information criterion to be used in model selection.
stepwise = FALSE,  # if FALSE considers all models
allowdrift = TRUE, # include a constant
trace = TRUE)      # show summary of all models considered
#Return: Best model: ARIMA(3,1,2)
arima312_x2 <- Arima(Data$x2,  # variable
order = c(3, 1, 2),  # (p,d,q) parameters
include.constant = TRUE)  # including a constant
AIC(arima510_x2,arima313_x2, arima312_x2)
BIC(arima510_x2,arima313_x2,arima312_x2 )
#FORECAST X1
tail(Data, 12)
forecasts <- forecast(arima510, # model for prediction
h = 30) # how many periods outside the sample
forecasts
forecasts_x1 <- forecast(arima510, # model for prediction
h = 30) # how many periods outside the sample
forecasts_x1$mean
class(forecasts_x1$mean)
#It is a ts object, not xts!
forecasts_x1$lower
forecasts_x1$upper
#Create xts object: (We use the second column (95% confidence interval))
forecasts_x1_data <- data.frame(f_mean = as.numeric(forecasts_x1$mean),
f_lower = as.numeric(forecasts_x1$lower[, 2]),
f_upper = as.numeric(forecasts_x1$upper[, 2]))
head(forecasts_x1_data)
head(forecasts_x1_data,30)
plot(forecasts_x1_data, type="l")
plot(forecasts_x1_data)
out_of_sample <-read.csv("Out_of_sample.csv",header = TRUE, dec = ".")
View(out_of_sample)
class(out_of_sample)
class(Data)
out_of_sample$X <- as.Date(out_of_sample$X,
format = "%d-%m-%y")
#Until now the class is "Data.Frame" object
class(out_of_sample)
#Create xts objects
out_of_sample <- xts(out_of_sample[,-1], out_of_sample$X)
class(out_of_sample)
out_of_sample$x1
oos_x1 <- out_of_sample$x1
oos_x1
out_of_sample
View(Data)
#Adding real value X1 below the current Dataset:
Data_x1 <- rbind(Data[, "x1"], oos_x1)
tail(GSPC2, n = 30)
tail(Data_x1, n = 30)
tail(Data_x1, n = 40)
#Turn Forecast with Index into Forecast with Date
forecasts_x1_xts <- xts(forecasts_x1_data,
order.by = index(oos_x1))
forecasts_x1_xts
#Merge it together with the original data
Data3 <- merge(Data2, forecasts_x1_xts)
#Merge it together with the original data
Data_x1_combined <- merge(Data_x1, forecasts_x1_xts)
head(Data_x1_combined)
tail(Data_x1_combined,40)
plot(Data_x1_combined [, c("x1", "f_mean", "f_lower", "f_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of x1",
col = c("black", "blue", "red", "red"))
plot(Data_x1_combined ["2020-12/", c("x1", "f_mean", "f_lower", "f_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of x1",
col = c("black", "blue", "red", "red"))
plot(Data_x1_combined ["2020-11/", c("x1", "f_mean", "f_lower", "f_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of x1",
col = c("black", "blue", "red", "red"))
plot(Data_x1_combined ["2020-12/", c("x1", "f_mean", "f_lower", "f_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of x1",
col = c("black", "blue", "red", "red"))
plot(Data_x1_combined ["2020-10/", c("x1", "f_mean", "f_lower", "f_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of x1",
col = c("black", "blue", "red", "red"))
plot(Data_x1_combined ["2020-11/", c("x1", "f_mean", "f_lower", "f_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of x1",
col = c("black", "blue", "red", "red"))
#Extract Data for Evaluating the Forecast:
Data_Eva <- tail(Data_x1_combined, 30)
View(Data_Eva)
Data_Eva
Data_Eva$mae   <-  abs(Data_Eva$x1 - Data_Eva$f_mean)
Data_Eva$mse   <-  (Data_Eva$x1 - Data_Eva$f_mean) ^ 2
Data_Eva$mape  <-  abs((Data_Eva$x1 - Data_Eva$f_mean)/Data_Eva$x1)
Data_Eva$amape <-  abs((Data_Eva$x1 - Data_Eva$f_mean)/(Data_Eva$x1 + Data_Eva$f_mean))
Data_Eva
colMeans(Data_Eva[, c("mae", "mse", "mape", "amape")])
apply(Data_Eva[, c("mae", "mse", "mape", "amape")], 2, FUN = median)
#Extract Data for Evaluating the Forecast:
Data_x1_Eva <- tail(Data_x1_combined, 30)
Data_x1_Eva
#Extract Data for Evaluating the Forecast:
Data_x1_Eva <- tail(Data_x1_combined, 30)
Data_x1_Eva
Data_x1_Eva$mae   <-  abs(Data_x1_Eva$x1 - Data_x1_Eva$f_mean)
Data_x1_Eva$mse   <-  (Data_x1_Eva$x1 - Data_x1_Eva$f_mean) ^ 2
Data_x1_Eva$mape  <-  abs((Data_x1_Eva$x1 - Data_x1_Eva$f_mean)/Data_x1_Eva$x1)
Data_x1_Eva$amape <-  abs((Data_x1_Eva$x1 - Data_x1_Eva$f_mean)/(Data_x1_Eva$x1 + Data_x1_Eva$f_mean))
Data_x1_Eva
colMeans(Data_x1_Eva[, c("mae", "mse", "mape", "amape")])
apply(Data_x1_Eva[, c("mae", "mse", "mape", "amape")], 2, FUN = median)
apply(Data_x1_Eva[, c("mae", "mse", "mape", "amape")], 2, FUN = median)
#Assign forecast X2 to object oos_x2
oos_x2 <- out_of_sample$x2
oos_x2
#FORECAST X1
tail(Data, 12)
forecasts_x2 <- forecast(arima510_x2, # model for prediction
h = 30) # how many periods outside the sample
forecasts_x2
#Extract the forecast points
forecasts_x2$mean
class(forecasts_x2$mean)
forecasts_x2$lower
forecasts_x2$upper
#Create xts object: (We use the second column (95% confidence interval))
forecasts_x2_data <- data.frame(f_mean = as.numeric(forecasts_x2$mean),
f_lower = as.numeric(forecasts_x2$lower[, 2]),
f_upper = as.numeric(forecasts_x2$upper[, 2]))
head(forecasts_x2_data,30)
#Adding real value X1 below the current Dataset:
Data_x2 <- rbind(Data[, "x2"], oos_x2)
tail(Data_x2, n = 40)
#Turn Forecast with Index into Forecast with Date
forecasts_x2_xts <- xts(forecasts_x2_data,
order.by = index(oos_x2))
forecasts_x2_xts
#Merge it together with the original data
Data_x2_combined <- merge(Data_x2, forecasts_x2_xts)
head(Data_x2_combined)
tail(Data_x2_combined,40)
plot(Data_x2_combined ["2020-11/", c("x2", "f_mean", "f_lower", "f_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of x2",
col = c("black", "blue", "red", "red"))
#Extract Data for Evaluating the Forecast:
Data_x2_Eva <- tail(Data_x2_combined, 30)
Data_x2_Eva
#Extract Data for Evaluating the Forecast:
Data_x2_Eva <- tail(Data_x2_combined, 30)
Data_x2_Eva
Data_x2_Eva$mae   <-  abs(Data_x2_Eva$x2 - Data_x2_Eva$f_mean)
Data_x2_Eva$mse   <-  (Data_x2_Eva$x2 - Data_x2_Eva$f_mean) ^ 2
Data_x2_Eva$mape  <-  abs((Data_x2_Eva$x2 - Data_x2_Eva$f_mean)/Data_x2_Eva$x2)
Data_x2_Eva$amape <-  abs((Data_x2_Eva$x2 - Data_x2_Eva$f_mean)/(Data_x2_Eva$x2 + Data_x2_Eva$f_mean))
Data_x2_Eva
colMeans(Data_x2_Eva[, c("mae", "mse", "mape", "amape")])
apply(Data_x2_Eva[, c("mae", "mse", "mape", "amape")], 2, FUN = median)
